 #include <iostream>
#include <string>
#include <iomanip> 
using namespace std;

struct GAMES {

	string name;
	float rating;
	char cashier[10] = "";
	float total = 0;
	char genre[10] = "";
	char dayofweek[10] = "";
	string sale  = "";
	float salePercent = 0;
	float totalDiscount;
	int id = 1;

};


//............................DATA LAYER...................................



int getIndexById(GAMES* games, int& gameCount, int id)  //Funtion that gets every order’s index , searching it by its ID
{

	for (int j = 0; j < gameCount; j++)       //cycling array indexes
	{
		if (games[j].id == id)
		{
			return j; //returning the index
		}

	}
	return -1;        //returning an error
}


void createPurchase(GAMES* games, int& gameCount, int& maxId, GAMES newPurchase)  //Funtion that creates a purchase by using the original copies 
																				  //of the game’s count and the maxId, becouse we have to change them.
{
	newPurchase.id = maxId++;
	games[gameCount] = newPurchase;
	gameCount++;
}

void updatePurchase(GAMES* games, int gameCount, int id, GAMES newPurchase)   //Funtion that  swaps the choosen purchase we want to update with a new one , called newPurchase. 
{

	int index = getIndexById(games, gameCount, id);  // the index gets the value of the returnd id from the function getIndexById

	games[index] = newPurchase; //swaps the choosen purchase we want to update with a new one , called newPurchase. 

}


void deletePurchase(GAMES* games, int& gameCount, int id)  //Funtion that moves purchases in the array  one step forward and deletes one of the purchases. 
{

	int index = getIndexById(games, gameCount, id);     // the index gets the value of the returnd id form the function getIndexById

	for (int j = index; j < gameCount - 1; j++)
	{
		games[j] = games[j + 1];           // moving  indexes of the array one index forward
	}

	gameCount--;            // making the cycle 1 index shorter therefore removing the choosen index from the cycle 

}


GAMES getPurchase(GAMES* games, int& gameCount, int id)  // Funtion that returns the purchases by their indexes.
{

	int index = getIndexById(games, gameCount, id);     // the index gets the value of the returnd id form the function getIndexById

	return games[index];               //returns the purchases by their indexes.

}


float getTotalPerDay(GAMES* games, int gameCount, char* dayofweek)
{
	float sum = 0;
	for (int i = 0; i < gameCount; i++)         //  cycling the indexes of the array
	{
		if (_strcmpi(games[i].dayofweek, dayofweek) == 0)  // checking if the day char inserted by the user 
															//is the same as other day chars in the array
		{
			sum = sum + games[i].total;         //summing the total of choosen chars
		}
	}
	return sum;        //returning the total for the choosen day by the user/client
}


float getTotalPerCashier(GAMES* games, int gameCount, char* cashier)
{
	float sum1 = 0;
	for (int j = 0; j < gameCount; j++) //  cycling the indexes of the array
	{
		if (_strcmpi(games[j].cashier, cashier) == 0)  // checking if the cashier char inserted by the user 
															//is the same as other cashier chars in the array
		{
			sum1 = sum1 + games[j].total;          //summing all the totals from matching chars 
		}
	}
	return sum1;        //returning the total for the choosen cashier by the user/client
}

float getTotalPerRating(GAMES* games, int gameCount, float& rating)
{
	float sum2 = 0;
	for (int j = 0; j < gameCount; j++) //  cycling the indexes of the array
	{
		if (games[j].rating - rating == 0)  // checking if the rating  inserted by the user 
															//is the same as other ratings  in the array
		{
			sum2 = sum2 + games[j].total;           //summing all the totals from matching numbers
		}
	}
	return sum2;        //returning the total money for the choosen rating by the user/client
}


float getTotalPerGenre(GAMES* games, int gameCount, char* genre)
{
	float sum3 = 0;
	for (int j = 0; j < gameCount; j++) //  cycling the indexes of the array
	{
		if (_strcmpi(games[j].genre, genre) == 0)  // checking if the genre char inserted by the user 
															//is the same as other genre chars in the array
		{
			sum3 = sum3 + games[j].total;          //summing all the totals from matching chars
		}
	}
	return sum3;        //returning the total money for the choosen game genre by the user/client
}

int gamesPerCashier(GAMES* games, int gameCount, char* cashier)
{
	float gameSum1 = 0;
	for (int j = 0; j < gameCount; j++) //  cycling the indexes of the array
	{
		if (_strcmpi(games[j].cashier, cashier) == 0)  // checking if the cashier char inserted by the user 
															//is the same as other cashier chars in the array
		{
			gameSum1++;
		}
	}
	return gameSum1;        //returning the number of games
}

int gamesPerDay(GAMES* games, int gameCount, char* dayofweek)
{
	float gameSum2 = 0;
	for (int i = 0; i < gameCount; i++)         //  cycling the indexes of the array
	{
		if (_strcmpi(games[i].dayofweek, dayofweek) == 0)  // checking if the day char inserted by the user 
															//is the same as other day chars in the array
		{
			gameSum2++;
		}
	}
	return gameSum2;        //returning the number of games
}

int gamesPerGenre(GAMES* games, int gameCount, char* genre)
{
	float gameSum3 = 0;
	for (int j = 0; j < gameCount; j++) //  cycling the indexes of the array
	{
		if (_strcmpi(games[j].genre, genre) == 0)  // checking if the genre char inserted by the user 
															//is the same as other genre chars in the array
		{
			gameSum3++;
		}
	}
	return gameSum3;        //returning the number of games
}

int gamesPerRating(GAMES* games, int gameCount, float& rating)
{
	float gameSum4 = 0;
	for (int j = 0; j < gameCount; j++) //  cycling the indexes of the array
	{
		if (games[j].rating - rating == 0)  // checking if the rating  inserted by the user 
															//is the same as other ratings  in the array
		{
			gameSum4++;
		}
	}
	return gameSum4;        //returning the number of games
}

float priceAfterSale(GAMES& addGame)
{
	if (addGame.salePercent != 0)
	{
		addGame.totalDiscount = addGame.total - ((addGame.total / 100) * addGame.salePercent);
		
	}
	else
	{
		addGame.totalDiscount = addGame.total;
	}
	return addGame.totalDiscount;
}

int compareStringYes(string main, string yes)
{
	
	int x =  main.compare(yes);

	return x;
}

int compareStringNo(string main , string no)
{
	
	int y = main.compare(no);

	return y;
}

//.......................PRESENTATION LAYER......................................


void createPurchaseMenu(GAMES* games, int& gameCount, int& maxId)
{
	int x;
	int y;
	string s1("yes");
	string s2("no");

	GAMES addGame;

	cout << "Choose the name of the game : ";
	cin >> addGame.name;

	cout << "Choose a cashier name :  ";
	cin >> addGame.cashier;


		
	cout << "Choose the rating from the scale with an integer from 0 to 100 : ";
	cin >> addGame.rating;
	int integerVal = int(addGame.rating);
		
	if (addGame.rating > 100 or addGame.rating < 0 or integerVal != addGame.rating)  //cheking if the rating is a valid integer and between 100 and 0
	{
		do {                              // repeating the initialization for the rating until a valid integer has been entered

			cout << "You entered an invalid rating. Please try again with an integer from 0 to 100 : ";    
			cin >> addGame.rating;
			 integerVal = int(addGame.rating); //reseting the value for the new rating 
			cout << endl;
			
		} while (addGame.rating > 100 or addGame.rating < 0  or integerVal != addGame.rating);
	}

	cout << " Choose a day of the week : ";
	cin >> addGame.dayofweek;

	cout << " Choose your game genre : ";
	cin >> addGame.genre;

	cout << " Choose a price : ";
	cin >> addGame.total;

	if (addGame.total <= 0)   //cheking if the  price is a valid one
	{
		do {                           // repeating the initialization for the price until a valid one has been entered

			cout << "You entered an invalid price. Please try again with a number bigger than 0 : ";
			cin >> addGame.total;
			cout << endl;
		} while (addGame.total <=0);
	}

	cout << " Is there a sale for this game ( yes or no) : ";
	cin >> addGame.sale;
	
	x = compareStringYes(addGame.sale, s1);
	if (x == 0)
	{
		
		cout << "OK , how much is the sale( integer from 1 to 99 % ) : ";
		cin >> addGame.salePercent;
		int integerVal1 = int(addGame.salePercent);
		cout << endl;
		if (addGame.salePercent <= 0 or addGame.salePercent > 99 or integerVal1 != addGame.salePercent) //cheking if the  sale percentage is a valid integer between 1 and 99
		{
			do {                           // repeating the initialization for the sale percentage until a valid integer  has been entered

				cout << "You entered an invalid sale percentage. Please try again with a integer between 1 and 99 : ";
				cin >> addGame.salePercent;
				integerVal1 = int(addGame.salePercent);
				cout << endl;
			} while (addGame.salePercent > 99 or addGame.salePercent <= 0 or  integerVal1 != addGame.salePercent);
		}
	}

	y = compareStringNo(addGame.sale , s2);
	 if( y == 0)
	{
		cout << "OK, no sales";
		cout << endl;
		cout << endl;
	}
	
	 if (x != 0 and y != 0)
	 {
		 do {

			 cout << "You entered an invalid answer. Please try again with a \" yes \" or \" no \". : ";
			 cin >> addGame.sale;
			 x = compareStringYes(addGame.sale , s1);
			 y = compareStringNo(addGame.sale ,s2);
			 cout << endl;
			 if (x == 0)
			 {
				 cout << "OK , how much is the sale( integer from 1 to 99 % ) : ";
				 cin >> addGame.salePercent;
				 int integerVal2 = int(addGame.salePercent);
				 cout << endl;
				 if (addGame.salePercent <= 0 or addGame.salePercent > 99 or integerVal2 != addGame.salePercent)   //cheking if our sale percentage is a valid integer
				 {
					 do {                           // repeating the initialization for the sale percentage until a valid integer has been entered

						 cout << "You entered an invalid sale percentage. Please try again with a integer between 1 and 99 : ";
						 cin >> addGame.salePercent;
						 integerVal2 = int(addGame.salePercent);  //reseting the value for the new percentage
						 cout << endl;
					 } while (addGame.total <= 0 or addGame.total > 99 or integerVal2 != addGame.salePercent);
				 }
			 }
			 if (y == 0)
			 {
				 cout << "OK, no sales";
				 cout << endl;
				 cout << endl;
			 }
		 } while (y != 0 and x != 0);
		 
	 }


	  addGame.totalDiscount =   priceAfterSale(addGame);
	
	createPurchase(games, gameCount, maxId, addGame);

}


void showPurchaseMenu(GAMES* games, int& gameCount, int& maxId)
{

	if (gameCount > 0)          //checking if there are any purchases made yet
	{
		cout << "Here are all the game purchases so far : " << endl;
	}
	else
	{
		cout << "There are no game purchases inserted yet. " << endl << endl
			<< "You can insert some using the |Create a Purchase| button of the menu." << endl << endl;
	}

	for (int j = 0; j < gameCount; j++)     //cycle for our games
	{
		cout << "ID : ";
		cout << games[j].id << " | Name : "
			<< games[j].name << " | Cashier : "
			<< games[j].cashier << " | Game rating( out of 100) : "
			<< games[j].rating << " | Day : "
			<< games[j].dayofweek << " | Game genre : "
			<< games[j].genre << " | Price : "
			<<setprecision(2) << fixed <<games[j].total << " | Discounted price : "
		<< setprecision(2) << fixed << games[j].totalDiscount << " | Sale in % : ";
		if (games[j].salePercent == 0)
		{
			cout << "No sales" << endl << endl;
			
		}
		else
		{
			cout << setprecision(0) << fixed << games[j].salePercent << endl << endl;
			
		}
	}
	cout << endl;
}


void deletePurchaseMenu(GAMES* games, int& gameCount, int& maxId)
{
	if (gameCount > 0)          //checking if there are any purchases made yet
	{

		int deleteGameId;

		cout << "Enter the Id of the game purchase you want to delete : ";
		cin >> deleteGameId;

		deletePurchase(games, gameCount, deleteGameId);    //using the function that deletes elements from the array

	}
	else
	{
		cout << "There are no game purchases inserted yet. " << endl << endl
			<< "You can insert some using the |Create a Purchase| button of the menu." << endl << endl;
	}

}


void editPurchaseMenu(GAMES* games, int& gameCount)
{

	if (gameCount > 0)          //checking if there are any purchases made yet
	{


		int editedId;
		cout << "Enter the ID of the game purchase you want to change : ";
		cin >> editedId;

		GAMES editgame = getPurchase(games, gameCount, editedId);

		cout << "1. Game name" << endl;
		cout << "2. Cashier" << endl;
		cout << "3. Game rating( out of 100)" << endl;
		cout << "4. Day of the week" << endl;                   // edit menu
		cout << "5. Game genre" << endl;
		cout << "6. Total money" << endl;
		cout << "7. Sale Percentage" << endl;
		cout << "Type the field you want to change : ";

		int change;
		cin >> change;


		switch (change)
		{

		case 1:
			cout << " Choose a new game name : ";
			cin >> editgame.name;
			updatePurchase(games, gameCount, editedId, editgame);
			break;

		case 2:
			cout << "Choose a new cashier : ";
			cin >> editgame.cashier;
			updatePurchase(games, gameCount, editedId, editgame);
			break;

		case 3:
			cout << "Choose a new game rating : ";
			cin >> editgame.rating;
			updatePurchase(games, gameCount, editedId, editgame);
			break;

		case 4:
			cout << "Choose  a new day of the week : ";
			cin >> editgame.dayofweek;
			updatePurchase(games, gameCount, editedId, editgame);
			break;

		case 5:
			cout << "Choose a new game genre : ";
			cin >> editgame.genre;
			updatePurchase(games, gameCount, editedId, editgame);
			break;

		case 6:
			cout << "Choose a new total : ";
			cin >> editgame.total;
			updatePurchase(games, gameCount, editedId, editgame);
			editgame.totalDiscount = priceAfterSale(editgame);
			updatePurchase(games, gameCount, editedId, editgame);
			break;
        
		case 7:
			cout << "Choose a new sale percantage : ";
			cin >> editgame.salePercent;
			updatePurchase(games, gameCount, editedId, editgame);
			editgame.totalDiscount = priceAfterSale(editgame);
			updatePurchase(games, gameCount, editedId, editgame);
			break;

		default:
			cout << "The number you choose was not valid!" << endl;
			break;
		}


	}
	else
	{
		cout << "There are no game purchases inserted yet. " << endl << endl
			<< "You can insert some using the |Create a Purchase| button of the menu." << endl << endl;
	}


}


void showReports(GAMES* games, int& gameCount)
{

	if (gameCount > 0)          //checking if there are any purchases made yet
	{

		int userchoice;             // used to get the users choice from the menu
		char userChar[10];          //used for getting char imputs from the user that are compared to other chars of the array
	    float userRating;             //used for getting int imputs from the user that are compared to other ints of the array
		float TotalMoney;            //used to sum the total 
		int TotalGames;              // used to sum the number of games
		
		


		cout << "1. Get total per day" << endl;
		cout << "2. Get total per cashier" << endl;
		cout << "3. Get total per rating" << endl;
		cout << "4. Get total per game genre" << endl;                                       // reports menu
		cout << "5. Show how much games are sold by a choosen cashier" << endl;
		cout << "6.  Show how much games are sold in a choosen day" << endl;
		cout << "7.  Show how much games are sold with a choosen genre" << endl;
		cout << "8.  Show how much games are sold with a choosen rating" << endl;

		cout << "Choose a report : ";

		cin >> userchoice;

		switch (userchoice)
		{

		case 1:
			cout << "Choose a day of the week : ";
			cin >> userChar;

			TotalMoney = getTotalPerDay(games, gameCount, userChar);           // giving the sum we got from getTotalPerDay to TotalMoney
			cout << "The total for all " << userChar << "s that week is : " << TotalMoney << endl;
			break;

		case 2:
			cout << "Choose a cashier : ";
			cin >> userChar;

			TotalMoney = getTotalPerCashier(games, gameCount, userChar);         // giving the sum we got from getTotalPerCashier to TotalMoney
			cout << "The total for " << userChar << "  as a cashier is : " << TotalMoney << endl;
			break;

		case 3:
			cout << "Choose a game rating : ";
			cin >> userRating;

			TotalMoney = getTotalPerRating(games, gameCount, userRating);          // giving the sum we got from getTotalPerRating to TotalMoney
			cout << "The total for " << setprecision(2) << fixed << userRating << " points of rating is : " << TotalMoney << endl;
			break;

		case 4:
			cout << "Choose a game genre : ";
			cin >> userChar;

			TotalMoney = getTotalPerGenre(games, gameCount, userChar);           // giving the sum we got from getTotalPerGenre to TotalMoney
			cout << "The total for the  " << userChar << " game genre  is : " << TotalMoney << endl;
			break;

		case 5:
			cout << "Choose a cashier to get the number of games sold by him : ";
			cin >> userChar;

			TotalGames = gamesPerCashier(games, gameCount, userChar);
			cout << "The number of games sold by  " << userChar << " is : " << TotalGames << endl;
			break;

		case 6:
			cout << "Choose a day to get the number of games sold during it : ";
			cin >> userChar;

			TotalGames = gamesPerDay(games, gameCount, userChar);
			cout << "The number of games sold during " << userChar << " is : " << TotalGames << endl;
			break;

		case 7:
			cout << "Choose a genre to get the number of games sold with it: ";
			cin >> userChar;

			TotalGames = gamesPerGenre(games, gameCount, userChar);
			cout << "The number of games sold with " << userChar << " as a game genre is : " << TotalGames << endl;
			break;

		case 8:
			cout << "Choose a rating to get the number of games sold with it : ";
			cin >> userRating;

			TotalGames = gamesPerRating(games, gameCount, userRating);
			cout << "The number of games sold with " << userRating << " rating  is : " << TotalGames << endl;
			break;



		default:
			cout << "The number you choose was not valid!" << endl;         // case if the user types anything else
			break;

		}

	}
	else
	{
		cout << "There are no game purchases inserted yet. " << endl << endl
			<< "You can insert some using the |Create a Purchase| button of the menu." << endl << endl;
	}



}


bool showMenu(GAMES* games, int& gameCount, int& maxId)
{

	int choice;
	cout << " --- MAIN MENU ---" << endl;
	cout << "1. Show all game purchases" << endl;
	cout << "2. Create a purchase" << endl;
	cout << "3. Edit a purchase" << endl;          // main menu
	cout << "4. Delete a purchase" << endl;
	cout << "5. See the reports" << endl;
	cout << "6. Exit the program" << endl;

	cin >> choice;

	switch (choice)
	{
	case 1:
		showPurchaseMenu(games, gameCount, maxId);
		break;

	case 2:
		createPurchaseMenu(games, gameCount, maxId);
		break;

	case 3:
		editPurchaseMenu(games, gameCount);
		break;

	case 4:
		deletePurchaseMenu(games, gameCount, maxId);
		break;

	case 5:
		showReports(games, gameCount);
		break;

	case 6:
		return false;

	default: break;
		cout << "The number you choose was not valid!" << endl;   // case if the user types anything else
	}

	return true;

}



//.............................................................................



int main()
{
	int gameCount = 0;
	int maxId = 1;
	GAMES  games[500];



	bool doShowMenu;

	do {

		doShowMenu = showMenu(games, gameCount, maxId);
	} while (doShowMenu);

}
